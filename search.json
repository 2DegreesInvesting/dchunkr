[{"path":"https://2degreesinvesting.github.io/dchunkr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 dchunkr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://2degreesinvesting.github.io/dchunkr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mauro Lepore. Author, maintainer. 2 Degrees Investing Initiative. Copyright holder, funder.","code":""},{"path":"https://2degreesinvesting.github.io/dchunkr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lepore M (2023). dchunkr: Work Chunks Data. R package version 0.0.0.9000,  https://2degreesinvesting.github.io/dchunkr/, https://github.com/2DegreesInvesting/dchunkr.","code":"@Manual{,   title = {dchunkr: Work with Chunks of Data},   author = {Mauro Lepore},   year = {2023},   note = {R package version 0.0.0.9000,  https://2degreesinvesting.github.io/dchunkr/},   url = {https://github.com/2DegreesInvesting/dchunkr}, }"},{"path":"https://2degreesinvesting.github.io/dchunkr/index.html","id":"dchunkr","dir":"","previous_headings":"","what":"Work with Chunks of Data","title":"Work with Chunks of Data","text":"goal dchunkr help work chunks data parallel cache results chunk. ’s extremely basic approach handling somewhat large datasets long runtimes. complete approach see targets package.","code":""},{"path":"https://2degreesinvesting.github.io/dchunkr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Work with Chunks of Data","text":"can install development version dchunkr GitHub :","code":"# install.packages(\"pak\") pak::pak(\"2DegreesInvesting/dchunkr\")"},{"path":"https://2degreesinvesting.github.io/dchunkr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Work with Chunks of Data","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(readr) library(future) library(furrr) library(fs) library(dchunkr)  # Enable computing over multiple workers in parallel plan(multisession)  data <- tibble(id = c(1, 1, 1, 2, 3))  job <- data |>    # Each chunk can run parallel to other chunks   nest_chunk(.by = \"id\", chunks = 3) |>    # Set where to cache the result of each chunk   add_file(parent = cache_path(\"demo\"), ext = \".csv\") |>    # Don't recompute what's already cached, so you can resume after interruptions   pick_undone() job #> # A tibble: 3 × 4 #>   chunk data             file                        done  #>   <int> <list>           <fs::path>                  <lgl> #> 1     1 <tibble [3 × 1]> ~/.cache/dchunkr/demo/1.csv FALSE #> 2     2 <tibble [1 × 1]> ~/.cache/dchunkr/demo/2.csv FALSE #> 3     3 <tibble [1 × 1]> ~/.cache/dchunkr/demo/3.csv FALSE  # Here is the important function you want to run for each chunk of data important <- function(data) mutate(data, x2 = id * 2)  job |>    # Select the columns that match the signature of the function passed to pmap   select(data, file) |>    # Map your important fuction to each chunk and write the result to the cache   future_pwalk(\\(data, file) important(data) |> write_csv(file))  # See cached files dir_tree(cache_path(\"demo\")) #> ~/.cache/dchunkr/demo #> ├── 1.csv #> ├── 2.csv #> └── 3.csv  # Read all cached files at once read_csv(dir_ls(cache_path(\"demo\"))) #> Rows: 5 Columns: 2 #> ── Column specification ─────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): id, x2 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 5 × 2 #>      id    x2 #>   <dbl> <dbl> #> 1     1     2 #> 2     1     2 #> 3     1     2 #> 4     2     4 #> 5     3     6  # Cleanup before the next run cache_path(\"demo\") |> dir_delete()"},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/add_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds the file column to a data frame — add_file","title":"Adds the file column to a data frame — add_file","text":"Adds file column data frame","code":""},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/add_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds the file column to a data frame — add_file","text":"","code":"add_file(data, parent, ext = \".rds\")"},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/add_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds the file column to a data frame — add_file","text":"data data frame. parent directory. ext extension.","code":""},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/add_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds the file column to a data frame — add_file","text":"data frame.","code":""},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/add_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds the file column to a data frame — add_file","text":"","code":"data <- tibble::tibble(chunk = 1) add_file(data, parent = tempdir()) #> # A tibble: 1 × 2 #>   chunk file                  #>   <dbl> <fs::path>            #> 1     1 /tmp/RtmpKYRatY/1.rds"},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/cache_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a path to the cache directory, ensuring it exists — cache_path","title":"Create a path to the cache directory, ensuring it exists — cache_path","text":"path() constructs relative path, path_wd() constructs absolute path current working directory.","code":""},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/cache_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a path to the cache directory, ensuring it exists — cache_path","text":"","code":"cache_path(..., cache_dir = rappdirs::user_cache_dir(\"dchunkr\"))"},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/cache_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a path to the cache directory, ensuring it exists — cache_path","text":"... character vectors, values NA, result also NA. paths follow recycling rules used tibble package, namely length 1 arguments recycled. cache_dir Character. directory cache.","code":""},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/cache_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a path to the cache directory, ensuring it exists — cache_path","text":"Character. path.","code":""},{"path":[]},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/cache_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a path to the cache directory, ensuring it exists — cache_path","text":"","code":"dir <- withr::local_tempfile() fs::dir_exists(dir) #> /tmp/RtmpKYRatY/file17fa5c3e4986  #>                            FALSE  cache_path(\"b\", cache_dir = dir) #> /tmp/RtmpKYRatY/file17fa5c3e4986/b fs::dir_exists(dir) #> /tmp/RtmpKYRatY/file17fa5c3e4986  #>                             TRUE"},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/dchunkr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"dchunkr: Work with Chunks of Data — dchunkr-package","title":"dchunkr: Work with Chunks of Data — dchunkr-package","text":"Helps work chunks data parallel cache results chunk. basic approach handling somewhat large datasets long runtimes.","code":""},{"path":[]},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/dchunkr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dchunkr: Work with Chunks of Data — dchunkr-package","text":"Maintainer: Mauro Lepore maurolepore@gmail.com (ORCID) contributors: 2 Degrees Investing Initiative contact@2degrees-investing.org [copyright holder, funder]","code":""},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/nest_chunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Nest a data frame by chunks containing all elements of a group — nest_chunk","title":"Nest a data frame by chunks containing all elements of a group — nest_chunk","text":"Nest data frame chunks containing elements group","code":""},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/nest_chunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nest a data frame by chunks containing all elements of a group — nest_chunk","text":"","code":"nest_chunk(data, .by, chunks)"},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/nest_chunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nest a data frame by chunks containing all elements of a group — nest_chunk","text":"data data frame. .column values . chunks Integer. Number chunks.","code":""},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/nest_chunk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nest a data frame by chunks containing all elements of a group — nest_chunk","text":"nested data frame.","code":""},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/nest_chunk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nest a data frame by chunks containing all elements of a group — nest_chunk","text":"","code":"data <- tibble::tibble(id = c(1, 1, 1, 2, 3)) out <- nest_chunk(data, .by = \"id\", chunks = 3) out$data #> [[1]] #> # A tibble: 3 × 1 #>      id #>   <dbl> #> 1     1 #> 2     1 #> 3     1 #>  #> [[2]] #> # A tibble: 1 × 1 #>      id #>   <dbl> #> 1     2 #>  #> [[3]] #> # A tibble: 1 × 1 #>      id #>   <dbl> #> 1     3 #>"},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/pick_undone.html","id":null,"dir":"Reference","previous_headings":"","what":"Add and filter (un)done files in a data frame — pick_undone","title":"Add and filter (un)done files in a data frame — pick_undone","text":"Add filter (un)done files data frame","code":""},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/pick_undone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add and filter (un)done files in a data frame — pick_undone","text":"","code":"pick_undone(data)"},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/pick_undone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add and filter (un)done files in a data frame — pick_undone","text":"data data frame column file.","code":""},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/pick_undone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add and filter (un)done files in a data frame — pick_undone","text":"data frame.","code":""},{"path":"https://2degreesinvesting.github.io/dchunkr/reference/pick_undone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add and filter (un)done files in a data frame — pick_undone","text":"","code":"data <- tibble::tibble(file = c(   withr::local_tempdir(pattern = \"exists_\"),   withr::local_tempfile(pattern = \"doesnt_exist_\") )) data #> # A tibble: 2 × 1 #>   file                                      #>   <chr>                                     #> 1 /tmp/RtmpKYRatY/exists_17fa515e6c94       #> 2 /tmp/RtmpKYRatY/doesnt_exist_17fa4ef14fe0  pick_undone(data) #> # A tibble: 1 × 2 #>   file                                      done  #>   <chr>                                     <lgl> #> 1 /tmp/RtmpKYRatY/doesnt_exist_17fa4ef14fe0 FALSE"}]
